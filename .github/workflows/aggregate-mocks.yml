name: Aggregate Mocks to mocks.json

on:
  push:
    branches:
      - main
    paths:
      - 'mocks/**/*.json'
      - 'functions.js'
  pull_request:
    types: [closed]
    branches:
      - main

# Add write permissions for the workflow
permissions:
  contents: write

jobs:
  aggregate-mocks:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Aggregate mock JSON files
        run: |
          node << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          const mocksDir = path.join(process.cwd(), 'mocks');
          const outputFile = path.join(process.cwd(), 'mocks.json');
          
          // Function to recursively read all JSON files
          function getAllJsonFiles(dir) {
            let results = [];
            const list = fs.readdirSync(dir);
            
            list.forEach(file => {
              const filePath = path.join(dir, file);
              const stat = fs.statSync(filePath);
              
              if (stat && stat.isDirectory()) {
                results = results.concat(getAllJsonFiles(filePath));
              } else if (file.endsWith('.json')) {
                results.push(filePath);
              }
            });
            
            return results;
          }
          
          // Read all mock files
          const mockFiles = getAllJsonFiles(mocksDir);
          const mocks = [];
          
          mockFiles.forEach(filePath => {
            try {
              const content = fs.readFileSync(filePath, 'utf8');
              const mockData = JSON.parse(content);
              
              // Add metadata
              const relativePath = path.relative(mocksDir, filePath);
              mocks.push({
                ...mockData,
                _metadata: {
                  sourceFile: relativePath,
                  lastModified: fs.statSync(filePath).mtime.toISOString()
                }
              });
              
              console.log(`Loaded: ${relativePath}`);
            } catch (err) {
              console.error(`Error loading ${filePath}:`, err.message);
            }
          });
          
          // Create aggregated output
          const output = {
            _comment: "AUTO-GENERATED FILE - DO NOT EDIT MANUALLY! Edit files in mocks/ folder instead. This file is generated by .github/workflows/aggregate-mocks.yml",
            version: "1.0.0",
            generatedAt: new Date().toISOString(),
            totalMocks: mocks.length,
            mocks: mocks
          };
          
          // Write to mocks.json
          fs.writeFileSync(outputFile, JSON.stringify(output, null, 2));
          console.log(`\nCreated mocks.json with ${mocks.length} mock(s)`);
          EOF
      
      - name: Check if mocks.json or functions.js changed
        id: check_changes
        run: |
          git add mocks.json functions.js 2>/dev/null || true
          if git diff --staged --quiet; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "mocks_changed=false" >> $GITHUB_OUTPUT
            echo "functions_changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            
            # Check specifically what changed
            if git diff --staged --name-only | grep -q "mocks.json"; then
              echo "mocks_changed=true" >> $GITHUB_OUTPUT
            else
              echo "mocks_changed=false" >> $GITHUB_OUTPUT
            fi
            
            if git diff --staged --name-only | grep -q "functions.js"; then
              echo "functions_changed=true" >> $GITHUB_OUTPUT
            else
              echo "functions_changed=false" >> $GITHUB_OUTPUT
            fi
          fi
      
      - name: Commit and push changes
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          
          # Build commit message based on what changed
          COMMIT_MSG="chore: Auto-update "
          if [ "${{ steps.check_changes.outputs.mocks_changed }}" == "true" ]; then
            COMMIT_MSG="${COMMIT_MSG}mocks.json "
          fi
          if [ "${{ steps.check_changes.outputs.functions_changed }}" == "true" ]; then
            COMMIT_MSG="${COMMIT_MSG}functions.js "
          fi
          
          git commit -m "${COMMIT_MSG}"
          git push
      
      - name: Trigger stub-generator reload
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          echo "Notifying stub-generator of updates..."
          
          # Build list of modified files
          MODIFIED_FILES="["
          if [ "${{ steps.check_changes.outputs.mocks_changed }}" == "true" ]; then
            MODIFIED_FILES="${MODIFIED_FILES}\"mocks.json\""
          fi
          if [ "${{ steps.check_changes.outputs.functions_changed }}" == "true" ]; then
            if [ "${{ steps.check_changes.outputs.mocks_changed }}" == "true" ]; then
              MODIFIED_FILES="${MODIFIED_FILES}, "
            fi
            MODIFIED_FILES="${MODIFIED_FILES}\"functions.js\""
          fi
          MODIFIED_FILES="${MODIFIED_FILES}]"
          
          echo "Modified files: ${MODIFIED_FILES}"
          
          # Replace with your actual stub-generator URL
          STUB_GENERATOR_URL="${{ secrets.STUB_GENERATOR_URL || 'http://localhost:10000' }}"
          
          curl -X POST "${STUB_GENERATOR_URL}/api/webhook/github-mocks-updated" \
            -H "Content-Type: application/json" \
            -d "{
              \"repository\": \"${{ github.repository }}\",
              \"commits\": [{\"modified\": ${MODIFIED_FILES}}],
              \"pusher\": {\"name\": \"github-actions[bot]\"}
            }" \
            --fail-with-body \
            --max-time 30 \
            || echo "Warning: Failed to notify stub-generator (server may be offline)"
          
          echo "Notification sent to stub-generator"

