name: Aggregate Mocks to mocks.json

on:
  push:
    branches:
      - main
    paths:
      - 'mocks/**/*.json'
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  aggregate-mocks:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Aggregate mock JSON files
        run: |
          node << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          const mocksDir = path.join(process.cwd(), 'mocks');
          const outputFile = path.join(process.cwd(), 'mocks.json');
          
          // Function to recursively read all JSON files
          function getAllJsonFiles(dir) {
            let results = [];
            const list = fs.readdirSync(dir);
            
            list.forEach(file => {
              const filePath = path.join(dir, file);
              const stat = fs.statSync(filePath);
              
              if (stat && stat.isDirectory()) {
                results = results.concat(getAllJsonFiles(filePath));
              } else if (file.endsWith('.json')) {
                results.push(filePath);
              }
            });
            
            return results;
          }
          
          // Read all mock files
          const mockFiles = getAllJsonFiles(mocksDir);
          const mocks = [];
          
          mockFiles.forEach(filePath => {
            try {
              const content = fs.readFileSync(filePath, 'utf8');
              const mockData = JSON.parse(content);
              
              // Add metadata
              const relativePath = path.relative(mocksDir, filePath);
              mocks.push({
                ...mockData,
                _metadata: {
                  sourceFile: relativePath,
                  lastModified: fs.statSync(filePath).mtime.toISOString()
                }
              });
              
              console.log(`✅ Loaded: ${relativePath}`);
            } catch (err) {
              console.error(`❌ Error loading ${filePath}:`, err.message);
            }
          });
          
          // Create aggregated output
          const output = {
            _comment: "⚠️ AUTO-GENERATED FILE - DO NOT EDIT MANUALLY! Edit files in mocks/ folder instead. This file is generated by .github/workflows/aggregate-mocks.yml",
            version: "1.0.0",
            generatedAt: new Date().toISOString(),
            totalMocks: mocks.length,
            mocks: mocks
          };
          
          // Write to mocks.json
          fs.writeFileSync(outputFile, JSON.stringify(output, null, 2));
          console.log(`\n✅ Created mocks.json with ${mocks.length} mock(s)`);
          EOF
      
      - name: Check if mocks.json changed
        id: check_changes
        run: |
          git add mocks.json
          if git diff --staged --quiet; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Commit and push mocks.json
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add mocks.json
          git commit -m "chore: Auto-generate mocks.json from mock files"
          git push

